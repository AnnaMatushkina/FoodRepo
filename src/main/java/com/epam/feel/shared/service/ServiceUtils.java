package com.epam.feel.shared.service;

import static com.epam.feel.client.IEpamFeelConstants.CONSTANTS;
import com.epam.feel.client.ui.util.WaitingGlass;
import com.epam.feel.client.ui.util.dialogs.MessageDialog;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.logical.shared.CloseEvent;
import com.google.gwt.event.logical.shared.CloseHandler;
import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestBuilder;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.Response;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.RpcRequestBuilder;
import com.google.gwt.user.client.rpc.ServiceDefTarget;
import com.google.gwt.user.client.ui.PopupPanel;

/**
 * Utilities simplifying making some things with services.
 * 
 * @author Michael_Silvanovich
 */
public class ServiceUtils {

    public static final String PARAMETER_IMAGE_ID = "id";
    public static final String IMAGE_URL_PREFIX = "epam-feel/images/?" + PARAMETER_IMAGE_ID + "=";

    private ServiceUtils() {};

    public static String getImageUrlById(Long id) {
        return GWT.getModuleBaseURL().replace(GWT.getModuleName() + "/", "") + IMAGE_URL_PREFIX + String.valueOf(id);
    }

    /**
     * Adds glass-type loading dialog for all rpc, i.e. it will be shown at start point of rpc and will be hidden at the
     * end point
     * 
     * @param service
     *            service-proxy generated by GWT
     */
    public static void addLoadingDialogForAllRpc(ServiceDefTarget service) {
        service.setRpcRequestBuilder(new ProxyingRequestBuilder());
    }

    private static class ProxyingRequestBuilder extends RpcRequestBuilder {

        private static final CloseHandler<PopupPanel> UNAUTHORIZED_DIALOG_HANDLER = new CloseHandler<PopupPanel>() {

            @Override
            public void onClose(CloseEvent<PopupPanel> event) {
                Window.Location.reload();
            }
        };

        @Override
        protected void doSetCallback(RequestBuilder rb, final RequestCallback callback) {
            WaitingGlass.show();
            super.doSetCallback(rb, new CallbackWrapper(callback));
        }

        private class CallbackWrapper implements RequestCallback {

            private RequestCallback callback;

            public CallbackWrapper(RequestCallback callback) {
                this.callback = callback;
            }

            @Override
            public void onResponseReceived(Request request, Response response) {
                WaitingGlass.hide();
                if (response.getStatusCode() != Response.SC_UNAUTHORIZED) {
                    callback.onResponseReceived(request, response);
                } else {
                    MessageDialog.alert(CONSTANTS.sessionIsExpired(), UNAUTHORIZED_DIALOG_HANDLER);
                }
            }

            @Override
            public void onError(Request request, Throwable exception) {
                WaitingGlass.hide();
                callback.onError(request, exception);
            }
        }

    }
}
